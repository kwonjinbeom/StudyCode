CREATE TABLE books(
    book_id NUMBER NOT NULL,    
    title VARCHAR2(80) NOT NULL,    
    publisher  VARCHAR2(60) NOT NULL,    
    year  VARCHAR2(4) NOT NULL,           
    price NUMBER NOT NULL,             
    CONSTRAINT book_id_PK PRIMARY KEY(book_id)
);
--
CREATE SEQUENCE books_seq
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 100000
NOCYCLE
CACHE 2;
--
CREATE OR REPLACE PROCEDURE BOOKS_SELECT
(VBOOKS OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN VBOOKS FOR SELECT BOOK_ID, TITLE, PUBLISHER, YEAR, PRICE FROM BOOKS;
END;
/
SHOW ERROR;
--
DECLARE
    RBOOKS SYS_REFCURSOR;
    RECORDBOOKS BOOKS%ROWTYPE;
BEGIN
    BOOKS_SELECT(RBOOKS);
    LOOP
        FETCH RBOOKS INTO RECORDBOOKS.BOOK_ID, RECORDBOOKS.TITLE, RECORDBOOKS.PUBLISHER,
            RECORDBOOKS.YEAR, RECORDBOOKS.PRICE;
        EXIT WHEN RBOOKS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(RECORDBOOKS.TITLE||' ' || RECORDBOOKS.PUBLISHER||' '||RECORDBOOKS.YEAR||' '|| RECORDBOOKS.PRICE);
    END LOOP;
END;
/
--프로시져 실행
DECLARE
    rtitle VARCHAR2(50);
BEGIN
    BOOKS_PROC(15,rtitle);
    DBMS_OUTPUT.PUT_LINE('책제목: ' || rtitle);
END;
/
--프로시져 생성(예외처리)
CREATE OR REPLACE PROCEDURE BOOKS_PROC
(P_BOOK_ID IN BOOKS.BOOK_ID%TYPE, R_TITLE OUT BOOKS.TITLE%TYPE)
IS
BEGIN
    SELECT title INTO R_title FROM books WHERE book_id = p_book_id;
EXCEPTION 
    WHEN OTHERS THEN
    r_title := '해당하는 책이 존재하지 않습니다.';
END BOOKS_PROC;
/
--
DECLARE
    rtitle VARCHAR2(50);
BEGIN
    BOOKS_PROC(25,rtitle);
    DBMS_OUTPUT.PUT_LINE('책제목: ' || rtitle);
END;
/
-- 프로시져 생성(미예외 처리)(강사님)
--CREATE OR REPLACE PROCEDURE BOOKS_PROC
--(P_BOOK_ID IN BOOKS.BOOK_ID%TYPE, R_TITLE OUT BOOKS.TITLE%TYPE)
--IS
--BEGIN
--    SELECT title INTO
--END;
--/
--강사님답
CREATE OR REPLACE PROCEDURE BOOKS_INPUT
(VTITLE IN BOOKS.TITLE%TYPE,
VPUBLISHER IN BOOKS.PUBLISHER%TYPE,
VYEAR IN BOOK.YEAR%TYPE,
VPRICE IN BOOKS.PRICE%TYPE,
VMSG OUT VARCHAR2)
IS
    VBOOK_ID BOOKS.BOOK_ID%TYPE;
    NODATA EXCEPTION;
BEGIN
    SELECT MAX(BOOK_ID) + 1 INTO VBOOK_ID FROM BOOKS;
    --SELECT BOOKS_SEQ.NEXTVAL INTO VBOOK_ID FROM DUAL;
    
    INSERT INTO BOOKS(BOOK_ID, TITLE, PUBLISHER, YEAR, PRICE)
    VALUES(VBOOK_ID, VTITLE, VPUBLISHER, VYEAR, VPRICE);
    
    IF SQL%NOTFOUND THEN
        RAISE NODATA;
    ELSE 
        VMSG := '책정보가 정상적으로 입력되었습니다';
    END IF;
COMMIT;
EXCEPTION
    WHEN NODATA THEN
        VMSG := '책정보 입력시 문제가 생겨 정상적으로 처리하지 못하였습니다.';
    ROLLBACK;
END BOOKS_INPUT;
/
SHOW ERROR;
DECLARE
    R_MSG VARCHAR2(70);
BEGIN
    BOOKS_INPUT('컴퓨터 구조와 프로그래밍','책만',,);

CREATE OR REPLACE PROCEDURE BOOKS_INPUT
(title IN books.title%TYPE, publisher IN books.publisher%TYPE, year books.year%TYPE, price books.price%TYPE)
IS
BEGIN
    INSERT INTO books(book_id, title, publisher, year, price)
    VALUES(books_seq.NEXTVAL, title, publisher, year, price);
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('등록 완료');
END;
/

EXECUTE BOOKS_SELECT('Operating System Concepts', 'Wiley', '2003', 30700);
EXECUTE BOOKS_SELECT('Head First PHP and MYSQL', 'OReilly', '2009', 58000);
EXECUTE BOOKS_SELECT('C Programming Language', 'Prentice-Hall', '1989', 35000);
EXECUTE BOOKS_SELECT('Head First SQL','OReilly','2007',43000);

--확인
SELECT * FROM books;
